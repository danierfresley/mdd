/**
 * generated by Xtext 2.19.0
 */
package co.edu.unal.dsl.generator;

import co.edu.unal.dsl.appPrecio.Arreglo;
import co.edu.unal.dsl.appPrecio.Boton;
import co.edu.unal.dsl.appPrecio.BotonOpcionItem;
import co.edu.unal.dsl.appPrecio.CampoEntrada;
import co.edu.unal.dsl.appPrecio.Color;
import co.edu.unal.dsl.appPrecio.Componente;
import co.edu.unal.dsl.appPrecio.Evento;
import co.edu.unal.dsl.appPrecio.Listado;
import co.edu.unal.dsl.appPrecio.MetodoComponente;
import co.edu.unal.dsl.appPrecio.MetodoServicio;
import co.edu.unal.dsl.appPrecio.Propiedad;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AppPrecioGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Componente> _filter = Iterables.<Componente>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Componente.class);
    for (final Componente e : _filter) {
      {
        String _lowerCase = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/").toLowerCase();
        String _plus = ("/" + _lowerCase);
        String _plus_1 = (_plus + "/");
        String _lowerCase_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/").toLowerCase();
        String _plus_2 = (_plus_1 + _lowerCase_1);
        String _plus_3 = (_plus_2 + ".module.ts");
        fsa.generateFile(_plus_3, 
          this.compileModule(e));
        String _lowerCase_2 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/").toLowerCase();
        String _plus_4 = ("/" + _lowerCase_2);
        String _plus_5 = (_plus_4 + "/");
        String _lowerCase_3 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/").toLowerCase();
        String _plus_6 = (_plus_5 + _lowerCase_3);
        String _plus_7 = (_plus_6 + ".page.html");
        fsa.generateFile(_plus_7, 
          this.compileHtml(e));
        String _lowerCase_4 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/").toLowerCase();
        String _plus_8 = ("/" + _lowerCase_4);
        String _plus_9 = (_plus_8 + "/");
        String _lowerCase_5 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/").toLowerCase();
        String _plus_10 = (_plus_9 + _lowerCase_5);
        String _plus_11 = (_plus_10 + ".page.ts");
        fsa.generateFile(_plus_11, 
          this.compileComponent(e));
        String _lowerCase_6 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/").toLowerCase();
        String _plus_12 = ("/" + _lowerCase_6);
        String _plus_13 = (_plus_12 + "/");
        String _lowerCase_7 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/").toLowerCase();
        String _plus_14 = (_plus_13 + _lowerCase_7);
        String _plus_15 = (_plus_14 + ".page.scss");
        fsa.generateFile(_plus_15, 
          this.compileSCSS(e));
        String _lowerCase_8 = this._iQualifiedNameProvider.getFullyQualifiedName(e.getServicio()).toString("/").toLowerCase();
        String _plus_16 = ("/" + _lowerCase_8);
        String _plus_17 = (_plus_16 + "/");
        String _lowerCase_9 = this._iQualifiedNameProvider.getFullyQualifiedName(e.getServicio()).toString("/").toLowerCase();
        String _plus_18 = (_plus_17 + _lowerCase_9);
        String _plus_19 = (_plus_18 + ".service.ts");
        fsa.generateFile(_plus_19, 
          this.compileService(e));
      }
    }
  }
  
  public CharSequence compileModule(final Componente c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import { NgModule } from \'@angular/core\';");
    _builder.newLine();
    _builder.append("import { CommonModule } from \'@angular/common\';");
    _builder.newLine();
    _builder.append("import { IonicModule } from \'@ionic/angular\';");
    _builder.newLine();
    _builder.append("import { FormsModule } from \'@angular/forms\';");
    _builder.newLine();
    _builder.append("import { RouterModule } from \'@angular/router\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import { ");
    String _firstUpper = StringExtensions.toFirstUpper(c.getName());
    _builder.append(_firstUpper);
    _builder.append("Page } from \'./");
    String _lowerCase = c.getName().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(".page\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("@NgModule({");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("imports: [");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("CommonModule,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("FormsModule,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("IonicModule,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RouterModule.forChild([");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("path: \'\',");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("component: ");
    String _firstUpper_1 = StringExtensions.toFirstUpper(c.getName());
    _builder.append(_firstUpper_1, "        ");
    _builder.append("Page");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("])");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("],");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("declarations: [");
    String _firstUpper_2 = StringExtensions.toFirstUpper(c.getName());
    _builder.append(_firstUpper_2, "  ");
    _builder.append("Page]");
    _builder.newLineIfNotEmpty();
    _builder.append("})");
    _builder.newLine();
    _builder.append("export class ");
    String _firstUpper_3 = StringExtensions.toFirstUpper(c.getName());
    _builder.append(_firstUpper_3);
    _builder.append("PageModule {}");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileHtml(final Componente c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<ion-header>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<ion-toolbar color=\"primary\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<ion-title>");
    _builder.newLine();
    _builder.append("      ");
    String _titulo = c.getTitulo();
    _builder.append(_titulo, "      ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("</ion-title>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</ion-toolbar>");
    _builder.newLine();
    _builder.append("</ion-header>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<ion-content>");
    _builder.newLine();
    _builder.newLine();
    {
      EList<CampoEntrada> _camposEntradas = c.getCamposEntradas();
      for(final CampoEntrada ce : _camposEntradas) {
        CharSequence _compileCamposEntrada = this.compileCamposEntrada(ce);
        _builder.append(_compileCamposEntrada);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      EList<Boton> _botones = c.getBotones();
      for(final Boton cb : _botones) {
        CharSequence _compileBotones = this.compileBotones(cb);
        _builder.append(_compileBotones);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<ion-list #");
    String _name = c.getLista().getName();
    _builder.append(_name, "  ");
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<ion-list-header>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<ion-label>");
    String _contenido = c.getLista().getContenido();
    _builder.append(_contenido, "      ");
    _builder.append("</ion-label>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("</ion-list-header>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<ion-item-sliding *ngFor=\"let item of ");
    String _name_1 = c.getArreglos().get(0).getName();
    _builder.append(_name_1, "    ");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<ion-item>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<ion-label class=\"ion-text-wrap\">");
    _builder.newLine();
    {
      EList<Propiedad> _propiedades = c.getInterfaz().getPropiedades();
      for(final Propiedad p : _propiedades) {
        _builder.append("          ");
        {
          boolean _equals = p.getName().equals("almacen");
          if (_equals) {
            _builder.append(" <h2>{{ item.");
            String _name_2 = p.getName();
            _builder.append(_name_2, "          ");
            _builder.append("}}</h2>  ");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Propiedad> _propiedades_1 = c.getInterfaz().getPropiedades();
      for(final Propiedad p_1 : _propiedades_1) {
        {
          boolean _equals_1 = p_1.getName().equals("producto");
          if (_equals_1) {
            _builder.append("<h1>{{ item.");
            String _name_3 = p_1.getName();
            _builder.append(_name_3);
            _builder.append(" | uppercase }}</h1> ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EList<Propiedad> _propiedades_2 = c.getInterfaz().getPropiedades();
      for(final Propiedad p_2 : _propiedades_2) {
        {
          boolean _equals_2 = p_2.getName().equals("precio");
          if (_equals_2) {
            _builder.append("\t      ");
            _builder.append("<ion-text color=\"primary\">");
            _builder.newLine();
            _builder.append("\t      ");
            _builder.append("<p>{{ item.");
            String _name_4 = p_2.getName();
            _builder.append(_name_4, "\t      ");
            _builder.append(" | currency:\'USD\':\'$\':\'1.0\'}}</p>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t      ");
            _builder.append("</ion-text>");
            _builder.newLine();
          }
        }
      }
    }
    {
      EList<Propiedad> _propiedades_3 = c.getInterfaz().getPropiedades();
      for(final Propiedad p_3 : _propiedades_3) {
        {
          boolean _equals_3 = p_3.getName().equals("modifica");
          if (_equals_3) {
            _builder.append("\t      ");
            _builder.append("<p>{{ item.");
            String _name_5 = p_3.getName();
            _builder.append(_name_5, "\t      ");
            _builder.append(" | date:\'short\' }}</p>");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("        ");
    _builder.append("</ion-label>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</ion-item>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<ion-item-options>");
    _builder.newLine();
    {
      EList<BotonOpcionItem> _botonesOpcionItem = c.getBotonesOpcionItem();
      for(final BotonOpcionItem cboi : _botonesOpcionItem) {
        _builder.append("\t\t");
        CharSequence _compileBotonesOpcionItem = this.compileBotonesOpcionItem(cboi);
        _builder.append(_compileBotonesOpcionItem, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("      ");
    _builder.append("</ion-item-options>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</ion-item-sliding>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</ion-list>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</ion-content>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileCamposEntrada(final CampoEntrada ce) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<ion-item>");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("<ion-label position=\"fixed\">");
    String _contenido = ce.getContenido();
    _builder.append(_contenido, "   ");
    _builder.append("</ion-label>");
    _builder.newLineIfNotEmpty();
    _builder.append("   ");
    _builder.append("<ion-input [(ngModel)]=");
    String _name = ce.getModelo().getName();
    _builder.append(_name, "   ");
    _builder.append(".");
    String _name_1 = ce.getCampo().getName();
    _builder.append(_name_1, "   ");
    _builder.append("></ion-input>");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("</ion-item>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileBotones(final Boton b) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<ion-button expand=\"full\" (");
    Evento _evento = b.getEvento();
    _builder.append(_evento);
    _builder.append(")=\"");
    String _name = b.getMetodo().getName();
    _builder.append(_name);
    _builder.append("()\">");
    String _contenido = b.getContenido();
    _builder.append(_contenido);
    _builder.append("</ion-button>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileBotonesOpcionItem(final BotonOpcionItem b) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<ion-item-option color=\"");
    Color _color = b.getColor();
    _builder.append(_color);
    _builder.append("\" (");
    Evento _evento = b.getEvento();
    _builder.append(_evento);
    _builder.append(")=\"");
    String _name = b.getMetodo().getName();
    _builder.append(_name);
    _builder.append("(item)\">");
    String _contenido = b.getContenido();
    _builder.append(_contenido);
    _builder.append("</ion-item-option>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileComponent(final Componente c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import { Component, ViewChild } from \'@angular/core\';");
    _builder.newLine();
    _builder.append("import { StorageService, Item } from \'../services/storage.service\';");
    _builder.newLine();
    _builder.append("import { Platform, ToastController, IonList } from \'@ionic/angular\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Component({");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("selector: \'app-");
    String _lowerCase = c.getName().toLowerCase();
    _builder.append(_lowerCase, "  ");
    _builder.append("\',");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("templateUrl: \'");
    String _lowerCase_1 = c.getName().toLowerCase();
    _builder.append(_lowerCase_1, "  ");
    _builder.append(".page.html\',");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("styleUrls: [\'");
    String _lowerCase_2 = c.getName().toLowerCase();
    _builder.append(_lowerCase_2, "  ");
    _builder.append(".page.scss\'],");
    _builder.newLineIfNotEmpty();
    _builder.append("})");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export class ");
    String _lowerCase_3 = c.getName().toLowerCase();
    _builder.append(_lowerCase_3);
    _builder.append("Page {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Arreglo> _arreglos = c.getArreglos();
      for(final Arreglo a : _arreglos) {
        {
          boolean _equals = a.getName().equals("items");
          if (_equals) {
            String _name = a.getName();
            _builder.append(_name);
            _builder.append(": ");
            String _name_1 = c.getInterfaz().getName();
            _builder.append(_name_1);
            _builder.append("[] = [];");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("  ");
    _builder.newLine();
    {
      EList<Listado> _listado = c.getListado();
      for(final Listado l : _listado) {
        {
          boolean _equals_1 = l.getName().equals("newItem");
          if (_equals_1) {
            String _name_2 = l.getName();
            _builder.append(_name_2);
            _builder.append(": ");
            String _name_3 = c.getInterfaz().getName();
            _builder.append(_name_3);
            _builder.append(" = <");
            String _name_4 = c.getInterfaz().getName();
            _builder.append(_name_4);
            _builder.append(">{};");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@ViewChild(\'");
    String _lowerCase_4 = c.getLista().getName().toLowerCase();
    _builder.append(_lowerCase_4, "  ");
    _builder.append("\', {static: true}) mylist: IonList;");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("constructor(private ");
    String _lowerCase_5 = c.getServicio().getName().toLowerCase();
    _builder.append(_lowerCase_5, "  ");
    _builder.append("Service: StorageService, private plt: Platform, private toastController: ToastController) {");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("this.plt.ready().then(()=>{");
    _builder.newLine();
    {
      EList<MetodoComponente> _metodos = c.getMetodos();
      for(final MetodoComponente m : _metodos) {
        {
          boolean _equals_2 = m.getName().equals("loadItems");
          if (_equals_2) {
            _builder.append("      \t");
            _builder.append("this.");
            String _name_5 = m.getName();
            _builder.append(_name_5, "      \t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("      ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/** Create */");
    _builder.newLine();
    {
      EList<MetodoComponente> _metodos_1 = c.getMetodos();
      for(final MetodoComponente m_1 : _metodos_1) {
        {
          boolean _equals_3 = m_1.getName().equals("addItem");
          if (_equals_3) {
            String _name_6 = m_1.getName();
            _builder.append(_name_6);
            _builder.append("() {");
            _builder.newLineIfNotEmpty();
            {
              EList<Listado> _listado_1 = c.getListado();
              for(final Listado l_1 : _listado_1) {
                {
                  boolean _equals_4 = l_1.getName().equals("newItem");
                  if (_equals_4) {
                    {
                      EList<Propiedad> _propiedades = c.getInterfaz().getPropiedades();
                      for(final Propiedad p : _propiedades) {
                        {
                          boolean _equals_5 = p.getName().equals("modifica");
                          if (_equals_5) {
                            _builder.append("\t\t");
                            _builder.append("this.");
                            String _name_7 = l_1.getName();
                            _builder.append(_name_7, "\t\t");
                            _builder.append(".");
                            String _name_8 = p.getName();
                            _builder.append(_name_8, "\t\t");
                            _builder.append(" = Date.now();");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            {
              EList<Listado> _listado_2 = c.getListado();
              for(final Listado l_2 : _listado_2) {
                {
                  boolean _equals_6 = l_2.getName().equals("newItem");
                  if (_equals_6) {
                    {
                      EList<Propiedad> _propiedades_1 = c.getInterfaz().getPropiedades();
                      for(final Propiedad p_1 : _propiedades_1) {
                        {
                          boolean _equals_7 = p_1.getName().equals("id");
                          if (_equals_7) {
                            _builder.append("  \t");
                            _builder.append("this.");
                            String _name_9 = l_2.getName();
                            _builder.append(_name_9, "  \t");
                            _builder.append(".");
                            String _name_10 = p_1.getName();
                            _builder.append(_name_10, "  \t");
                            _builder.append(" = Date.now();");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            {
              EList<Listado> _listado_3 = c.getListado();
              for(final Listado l_3 : _listado_3) {
                {
                  boolean _equals_8 = l_3.getName().equals("newItem");
                  if (_equals_8) {
                    {
                      EList<MetodoServicio> _metodos_2 = c.getServicio().getMetodos();
                      for(final MetodoServicio sm : _metodos_2) {
                        {
                          boolean _equals_9 = sm.getName().equals("add");
                          if (_equals_9) {
                            _builder.append("this.");
                            String _lowerCase_6 = c.getServicio().getName().toLowerCase();
                            _builder.append(_lowerCase_6);
                            _builder.append("Service.");
                            String _name_11 = sm.getName();
                            _builder.append(_name_11);
                            _builder.append("(this.");
                            String _name_12 = l_3.getName();
                            _builder.append(_name_12);
                            _builder.append(").then(item =>{");
                            _builder.newLineIfNotEmpty();
                            _builder.append("this.");
                            String _name_13 = l_3.getName();
                            _builder.append(_name_13);
                            _builder.append(" = <");
                            String _name_14 = c.getInterfaz().getName();
                            _builder.append(_name_14);
                            _builder.append(">{};");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            _builder.append("    \t\t\t\t");
            _builder.append("this.showToast(\'");
            String _mensaje = m_1.getMensaje();
            _builder.append(_mensaje, "    \t\t\t\t");
            _builder.append("\');");
            _builder.newLineIfNotEmpty();
            {
              EList<MetodoComponente> _metodos_3 = c.getMetodos();
              for(final MetodoComponente me : _metodos_3) {
                {
                  boolean _equals_10 = me.getName().equals("loadItems");
                  if (_equals_10) {
                    _builder.append("this.");
                    String _name_15 = me.getName();
                    _builder.append(_name_15);
                    _builder.append("();");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t  \t\t\t\t        ");
                    _builder.append("});");
                    _builder.newLine();
                    _builder.append("\t  \t\t\t\t      ");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("/** Read */");
    _builder.newLine();
    {
      EList<MetodoComponente> _metodos_4 = c.getMetodos();
      for(final MetodoComponente m_2 : _metodos_4) {
        {
          boolean _equals_11 = m_2.getName().equals("loadItems");
          if (_equals_11) {
            _builder.append("\t\t        \t");
            String _name_16 = m_2.getName();
            _builder.append(_name_16, "\t\t        \t");
            _builder.append("() {\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t        \t\t");
            _builder.newLine();
            {
              EList<MetodoServicio> _metodos_5 = c.getServicio().getMetodos();
              for(final MetodoServicio sm_1 : _metodos_5) {
                {
                  boolean _equals_12 = sm_1.getName().equals("getAll");
                  if (_equals_12) {
                    _builder.append("this.");
                    String _lowerCase_7 = c.getServicio().getName().toLowerCase();
                    _builder.append(_lowerCase_7);
                    _builder.append("Service.");
                    String _name_17 = sm_1.getName();
                    _builder.append(_name_17);
                    _builder.append("().then(items => {");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.newLine();
            {
              EList<Arreglo> _arreglos_1 = c.getArreglos();
              for(final Arreglo a_1 : _arreglos_1) {
                {
                  boolean _equals_13 = a_1.getName().equals("items");
                  if (_equals_13) {
                    _builder.append("this.");
                    String _name_18 = a_1.getName();
                    _builder.append(_name_18);
                    _builder.append(" = items;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t          ");
                    _builder.append("});");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t        ");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("\t\t\t\t   ");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t   ");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("/** update */");
    _builder.newLine();
    {
      EList<MetodoComponente> _metodos_6 = c.getMetodos();
      for(final MetodoComponente m_3 : _metodos_6) {
        {
          boolean _equals_14 = m_3.getName().equals("updateItem");
          if (_equals_14) {
            _builder.append("   \t\t\t     \t   ");
            String _name_19 = m_3.getName();
            _builder.append(_name_19, "   \t\t\t     \t   ");
            _builder.append("(item: ");
            String _name_20 = c.getInterfaz().getName();
            _builder.append(_name_20, "   \t\t\t     \t   ");
            _builder.append(") {\t ");
            _builder.newLineIfNotEmpty();
            {
              EList<Propiedad> _propiedades_2 = c.getInterfaz().getPropiedades();
              for(final Propiedad p_2 : _propiedades_2) {
                {
                  boolean _equals_15 = p_2.getName().equals("almacen");
                  if (_equals_15) {
                    _builder.append("item.");
                    String _name_21 = p_2.getName();
                    _builder.append(_name_21);
                    _builder.append(" = `UPDATED: ${item.");
                    String _name_22 = p_2.getName();
                    _builder.append(_name_22);
                    _builder.append("}`;");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  boolean _equals_16 = p_2.getName().equals("modifica");
                  if (_equals_16) {
                    _builder.append("item.");
                    String _name_23 = p_2.getName();
                    _builder.append(_name_23);
                    _builder.append(" = Date.now();");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            {
              EList<MetodoServicio> _metodos_7 = c.getServicio().getMetodos();
              for(final MetodoServicio sm_2 : _metodos_7) {
                {
                  boolean _equals_17 = sm_2.getName().equals("update");
                  if (_equals_17) {
                    _builder.append("this.");
                    String _lowerCase_8 = c.getServicio().getName().toLowerCase();
                    _builder.append(_lowerCase_8);
                    _builder.append("Service.");
                    String _name_24 = sm_2.getName();
                    _builder.append(_name_24);
                    _builder.append("(item).then(item =>{");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            {
              boolean _equals_18 = m_3.getName().equals("updateItem");
              if (_equals_18) {
                _builder.append("this.showToast(\'");
                String _mensaje_1 = m_3.getMensaje();
                _builder.append(_mensaje_1);
                _builder.append("\');");
                _builder.newLineIfNotEmpty();
                _builder.append("this.mylist.closeSlidingItems();");
                _builder.newLine();
              }
            }
            {
              EList<MetodoComponente> _metodos_8 = c.getMetodos();
              for(final MetodoComponente me_1 : _metodos_8) {
                {
                  boolean _equals_19 = me_1.getName().equals("loadItems");
                  if (_equals_19) {
                    _builder.append("this.");
                    String _name_25 = me_1.getName();
                    _builder.append(_name_25);
                    _builder.append("();");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t\t         ");
                    _builder.append("});");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t          ");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("   \t\t\t   ");
    _builder.newLine();
    _builder.append("   \t\t\t   ");
    _builder.newLine();
    _builder.append("   \t\t\t   ");
    _builder.newLine();
    _builder.append("   \t\t\t   ");
    _builder.append("/** Delete */");
    _builder.newLine();
    {
      EList<MetodoComponente> _metodos_9 = c.getMetodos();
      for(final MetodoComponente m_4 : _metodos_9) {
        {
          boolean _equals_20 = m_4.getName().equals("deleteItem");
          if (_equals_20) {
            _builder.append("   \t\t\t    ");
            String _name_26 = m_4.getName();
            _builder.append(_name_26, "   \t\t\t    ");
            _builder.append("(item: ");
            String _name_27 = c.getInterfaz().getName();
            _builder.append(_name_27, "   \t\t\t    ");
            _builder.append("){");
            _builder.newLineIfNotEmpty();
            {
              EList<MetodoServicio> _metodos_10 = c.getServicio().getMetodos();
              for(final MetodoServicio sm_3 : _metodos_10) {
                {
                  boolean _equals_21 = sm_3.getName().equals("delete");
                  if (_equals_21) {
                    _builder.append("this.");
                    String _lowerCase_9 = c.getServicio().getName().toLowerCase();
                    _builder.append(_lowerCase_9);
                    _builder.append("Service.");
                    String _name_28 = sm_3.getName();
                    _builder.append(_name_28);
                    _builder.append("(item.id).then(item =>{");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            {
              boolean _equals_22 = m_4.getName().equals("deleteItem");
              if (_equals_22) {
                _builder.append("this.showToast(\'");
                String _mensaje_2 = m_4.getMensaje();
                _builder.append(_mensaje_2);
                _builder.append("\');");
                _builder.newLineIfNotEmpty();
                _builder.append("this.mylist.closeSlidingItems();");
                _builder.newLine();
              }
            }
            {
              EList<MetodoComponente> _metodos_11 = c.getMetodos();
              for(final MetodoComponente me_2 : _metodos_11) {
                {
                  boolean _equals_23 = me_2.getName().equals("loadItems");
                  if (_equals_23) {
                    _builder.append("this.");
                    String _name_29 = me_2.getName();
                    _builder.append(_name_29);
                    _builder.append("();");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t\t\t       ");
                    _builder.append("});");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t\t     ");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("   \t\t\t   ");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("/** Helper */");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("async showToast(msg) {");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("const toast = await this.toastController.create({");
    _builder.newLine();
    _builder.append("\t         ");
    _builder.append("message: msg,");
    _builder.newLine();
    _builder.append("\t         ");
    _builder.append("duration: 2000");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("toast.present();");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileSCSS(final Componente c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileService(final Componente c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import { Injectable } from \'@angular/core\';");
    _builder.newLine();
    _builder.append("import { Storage } from \'@ionic/storage\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export interface ");
    String _name = c.getInterfaz().getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<Propiedad> _propiedades = c.getInterfaz().getPropiedades();
      for(final Propiedad p : _propiedades) {
        {
          boolean _equals = p.getName().equals("id");
          if (_equals) {
            _builder.append("\t");
            String _name_1 = p.getName();
            _builder.append(_name_1, "\t");
            _builder.append(": number,");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _equals_1 = p.getName().equals("almacen");
          if (_equals_1) {
            _builder.append("\t\t  \t\t");
            String _name_2 = p.getName();
            _builder.append(_name_2, "\t\t  \t\t");
            _builder.append(": string,");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _equals_2 = p.getName().equals("producto");
          if (_equals_2) {
            _builder.append("\t\t  \t\t");
            String _name_3 = p.getName();
            _builder.append(_name_3, "\t\t  \t\t");
            _builder.append(": string,");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _equals_3 = p.getName().equals("precio");
          if (_equals_3) {
            _builder.append("\t\t  \t\t");
            String _name_4 = p.getName();
            _builder.append(_name_4, "\t\t  \t\t");
            _builder.append(": number,");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _equals_4 = p.getName().equals("modifica");
          if (_equals_4) {
            _builder.append("\t");
            String _name_5 = p.getName();
            _builder.append(_name_5, "\t");
            _builder.append(": number");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("const ITEMS_KEY = \'");
    String _name_6 = c.getTecnologia().getLlave().getName();
    _builder.append(_name_6);
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("@Injectable({");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("providedIn: \'root\'");
    _builder.newLine();
    _builder.append("})");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export class ");
    String _firstUpper = StringExtensions.toFirstUpper(c.getServicio().getName());
    _builder.append(_firstUpper);
    _builder.append("Service {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("constructor(private ");
    String _name_7 = c.getServicio().getName();
    _builder.append(_name_7, "\t");
    _builder.append(": Storage) { }");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/** Create */");
    _builder.newLine();
    {
      EList<MetodoServicio> _metodos = c.getServicio().getMetodos();
      for(final MetodoServicio m : _metodos) {
        _builder.append("\t");
        {
          boolean _equals_5 = m.getName().equals("add");
          if (_equals_5) {
            _builder.append(" ");
            String _name_8 = m.getName();
            _builder.append(_name_8, "\t");
            _builder.append("(item: ");
            String _name_9 = c.getInterfaz().getName();
            _builder.append(_name_9, "\t");
            _builder.append("): Promise<any> {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("return this.");
            String _name_10 = c.getServicio().getName();
            _builder.append(_name_10, "\t  ");
            _builder.append(".get(ITEMS_KEY).then((items: ");
            String _name_11 = c.getInterfaz().getName();
            _builder.append(_name_11, "\t  ");
            _builder.append("[]) => {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("if (items) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("      ");
            _builder.append("items.push(item);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("      ");
            _builder.append("return this.");
            String _name_12 = c.getServicio().getName();
            _builder.append(_name_12, "\t      ");
            _builder.append(".set(ITEMS_KEY, items);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("}else {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("      ");
            _builder.append("return this.");
            String _name_13 = c.getServicio().getName();
            _builder.append(_name_13, "\t      ");
            _builder.append(".set(ITEMS_KEY, [item]);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("});");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("/** Read */");
    _builder.newLine();
    {
      EList<MetodoServicio> _metodos_1 = c.getServicio().getMetodos();
      for(final MetodoServicio m_1 : _metodos_1) {
        _builder.append("\t ");
        {
          boolean _equals_6 = m_1.getName().equals("getAll");
          if (_equals_6) {
            _builder.append(" ");
            String _name_14 = m_1.getName();
            _builder.append(_name_14, "\t ");
            _builder.append("(): Promise<");
            String _name_15 = c.getInterfaz().getName();
            _builder.append(_name_15, "\t ");
            _builder.append("[]> {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t ");
            _builder.append("  ");
            _builder.append("return this.");
            String _name_16 = c.getServicio().getName();
            _builder.append(_name_16, "\t   ");
            _builder.append(".get(ITEMS_KEY);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t ");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("/** Update */");
    _builder.newLine();
    {
      EList<MetodoServicio> _metodos_2 = c.getServicio().getMetodos();
      for(final MetodoServicio m_2 : _metodos_2) {
        {
          boolean _equals_7 = m_2.getName().equals("update");
          if (_equals_7) {
            _builder.append("\t ");
            String _name_17 = m_2.getName();
            _builder.append(_name_17, "\t ");
            _builder.append("(item: ");
            String _name_18 = c.getInterfaz().getName();
            _builder.append(_name_18, "\t ");
            _builder.append("): Promise<any> {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t ");
            _builder.append("  ");
            _builder.append("return this.");
            String _name_19 = c.getServicio().getName();
            _builder.append(_name_19, "\t   ");
            _builder.append(".get(ITEMS_KEY).then((items: ");
            String _name_20 = c.getInterfaz().getName();
            _builder.append(_name_20, "\t   ");
            _builder.append("[]) => {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t ");
            _builder.append("    ");
            _builder.newLine();
            _builder.append("\t ");
            _builder.append("    ");
            _builder.append("if (!items || items.length == 0) {");
            _builder.newLine();
            _builder.append("\t ");
            _builder.append("      ");
            _builder.append("return null;");
            _builder.newLine();
            _builder.append("\t ");
            _builder.append("    ");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t ");
            _builder.append("    ");
            _builder.newLine();
            {
              EList<Arreglo> _arreglos = c.getArreglos();
              for(final Arreglo a : _arreglos) {
                {
                  boolean _equals_8 = a.getName().equals("newItems");
                  if (_equals_8) {
                    _builder.append("let ");
                    String _name_21 = a.getName();
                    _builder.append(_name_21);
                    _builder.append(": ");
                    String _name_22 = c.getInterfaz().getName();
                    _builder.append(_name_22);
                    _builder.append("[] = [];");
                    _builder.newLineIfNotEmpty();
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t       ");
                    _builder.append("for (let i of items) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t         ");
                    _builder.append("if (i.id == item.id) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t           ");
                    String _name_23 = a.getName();
                    _builder.append(_name_23, "\t\t\t\t\t           ");
                    _builder.append(".push(item);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t         ");
                    _builder.append("} else {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t           ");
                    String _name_24 = a.getName();
                    _builder.append(_name_24, "\t\t\t\t\t           ");
                    _builder.append(".push(i);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t         ");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t       ");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t       ");
                    _builder.append("return this.");
                    String _name_25 = c.getInterfaz().getName();
                    _builder.append(_name_25, "\t\t\t\t\t       ");
                    _builder.append(".set(ITEMS_KEY, ");
                    String _name_26 = a.getName();
                    _builder.append(_name_26, "\t\t\t\t\t       ");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t     ");
                    _builder.append("});");
                    _builder.newLine();
                    _builder.append("\t\t\t\t\t   ");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t  ");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("/** Delete */");
    _builder.newLine();
    {
      EList<MetodoServicio> _metodos_3 = c.getServicio().getMetodos();
      for(final MetodoServicio m_3 : _metodos_3) {
        {
          boolean _equals_9 = m_3.getName().equals("delete");
          if (_equals_9) {
            _builder.newLine();
            _builder.append("  ");
            String _name_27 = m_3.getName();
            _builder.append(_name_27, "  ");
            _builder.append("(id: number): Promise<");
            String _name_28 = c.getInterfaz().getName();
            _builder.append(_name_28, "  ");
            _builder.append("> {");
            _builder.newLineIfNotEmpty();
            _builder.append("  ");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("return this.");
            String _name_29 = c.getServicio().getName();
            _builder.append(_name_29, "    ");
            _builder.append(".get(ITEMS_KEY).then((items: ");
            String _name_30 = c.getInterfaz().getName();
            _builder.append(_name_30, "    ");
            _builder.append("[]) =>{");
            _builder.newLineIfNotEmpty();
            _builder.append("      ");
            _builder.append("if (!items || items.length == 0) {");
            _builder.newLine();
            _builder.append("        ");
            _builder.append("return null;");
            _builder.newLine();
            _builder.append("      ");
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("      ");
            _builder.append("let toKepp: ");
            String _name_31 = c.getInterfaz().getName();
            _builder.append(_name_31, "      ");
            _builder.append("[] = [];");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("      ");
            _builder.append("for (let i of items) {");
            _builder.newLine();
            {
              EList<Propiedad> _propiedades_1 = c.getInterfaz().getPropiedades();
              for(final Propiedad p_1 : _propiedades_1) {
                _builder.append("        ");
                {
                  boolean _equals_10 = p_1.getName().equals("id");
                  if (_equals_10) {
                    _builder.append("if (i.");
                    String _name_32 = p_1.getName();
                    _builder.append(_name_32, "        ");
                    _builder.append(" != id) {");
                  }
                }
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("          ");
            _builder.append("toKepp.push(i);");
            _builder.newLine();
            _builder.append("        ");
            _builder.append("}");
            _builder.newLine();
            _builder.append("      ");
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("      ");
            _builder.append("return this.");
            String _name_33 = c.getServicio().getName();
            _builder.append(_name_33, "      ");
            _builder.append(".set(ITEMS_KEY, toKepp);");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("    ");
            _builder.append("});");
            _builder.newLine();
            _builder.append("  ");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t  ");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
