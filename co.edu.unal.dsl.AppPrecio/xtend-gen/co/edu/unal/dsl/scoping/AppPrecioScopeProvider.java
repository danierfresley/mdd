/**
 * generated by Xtext 2.19.0
 */
package co.edu.unal.dsl.scoping;

import java.util.List;
import java.util.Objects;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.FilteringScope;

import co.edu.unal.dsl.appPrecio.AppPrecioPackage;
import co.edu.unal.dsl.appPrecio.Arreglo;
import co.edu.unal.dsl.appPrecio.CampoEntrada;
import co.edu.unal.dsl.appPrecio.Componente;
import co.edu.unal.dsl.appPrecio.LLave;
import co.edu.unal.dsl.appPrecio.MetodoComponente;
import co.edu.unal.dsl.appPrecio.MetodoServicio;
import co.edu.unal.dsl.appPrecio.MetodoTecnologia;
import co.edu.unal.dsl.appPrecio.Propiedad;
import co.edu.unal.dsl.appPrecio.Tecnologia;
import co.edu.unal.dsl.appPrecio.TiposArregloListado;
import co.edu.unal.dsl.scoping.AbstractAppPrecioScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class AppPrecioScopeProvider extends AbstractAppPrecioScopeProvider {
	
	@Override
	public IScope getScope(EObject context, EReference reference) {
		
		if (context instanceof CampoEntrada
	            && reference == AppPrecioPackage.Literals.CAMPO_ENTRADA__CAMPO) {
			
			EObject rootElement = EcoreUtil2.getRootContainer(context);
			
			List<Propiedad> candidatos = EcoreUtil2.getAllContentsOfType(rootElement, Propiedad.class);
			
			IScope existingScope = Scopes.scopeFor(candidatos);
			
			return new FilteringScope(existingScope, (e) -> !Objects.equals(e.getEObjectOrProxy(), context));
			
		}
		
		if (context instanceof MetodoComponente
				&& reference == AppPrecioPackage.Literals.METODO_COMPONENTE__METODO_SERVICIO) {
			
			EObject rootElement = EcoreUtil2.getRootContainer(context);
			
			List<MetodoServicio> candidatos = EcoreUtil2.getAllContentsOfType(rootElement, MetodoServicio.class);
			
			IScope existingScope = Scopes.scopeFor(candidatos);
			
			return new FilteringScope(existingScope, (e) -> !Objects.equals(e.getEObjectOrProxy(), context));
			
		}
		
		if (context instanceof MetodoTecnologia
				&& reference == AppPrecioPackage.Literals.METODO_TECNOLOGIA__VALOR) {
			
			EObject rootElement = EcoreUtil2.getRootContainer(context);
			
			List<TiposArregloListado> candidatos = EcoreUtil2.getAllContentsOfType(rootElement, TiposArregloListado.class);
			
			IScope existingScope = Scopes.scopeFor(candidatos);
			
			return new FilteringScope(existingScope, (e) -> !Objects.equals(e.getEObjectOrProxy(), context));
			
		}
		
		if (context instanceof Tecnologia
				&& reference == AppPrecioPackage.Literals.METODO_TECNOLOGIA__VALOR) {
			
		}
		
		return super.getScope(context, reference);
	}
	
}
