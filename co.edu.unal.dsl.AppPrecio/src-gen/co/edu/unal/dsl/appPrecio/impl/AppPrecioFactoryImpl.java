/**
 * generated by Xtext 2.19.0
 */
package co.edu.unal.dsl.appPrecio.impl;

import co.edu.unal.dsl.appPrecio.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AppPrecioFactoryImpl extends EFactoryImpl implements AppPrecioFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AppPrecioFactory init()
  {
    try
    {
      AppPrecioFactory theAppPrecioFactory = (AppPrecioFactory)EPackage.Registry.INSTANCE.getEFactory(AppPrecioPackage.eNS_URI);
      if (theAppPrecioFactory != null)
      {
        return theAppPrecioFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AppPrecioFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AppPrecioFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AppPrecioPackage.APP_PRECIO: return createAppPrecio();
      case AppPrecioPackage.DOMINIO: return createDominio();
      case AppPrecioPackage.ARQUITECTURA: return createArquitectura();
      case AppPrecioPackage.TECNOLOGIA: return createTecnologia();
      case AppPrecioPackage.SERVICIO: return createServicio();
      case AppPrecioPackage.METODO_COMPONENTE: return createMetodoComponente();
      case AppPrecioPackage.METODO_SERVICIO: return createMetodoServicio();
      case AppPrecioPackage.METODO_TECNOLOGIA: return createMetodoTecnologia();
      case AppPrecioPackage.ENTIDAD: return createEntidad();
      case AppPrecioPackage.INTERFAZ: return createInterfaz();
      case AppPrecioPackage.PROPIEDAD: return createPropiedad();
      case AppPrecioPackage.COMPONENTE: return createComponente();
      case AppPrecioPackage.CAMPO_ENTRADA: return createCampoEntrada();
      case AppPrecioPackage.BOTON: return createBoton();
      case AppPrecioPackage.BOTON_OPCION_ITEM: return createBotonOpcionItem();
      case AppPrecioPackage.LISTA: return createLista();
      case AppPrecioPackage.TIPOS: return createTipos();
      case AppPrecioPackage.LLAVE: return createLLave();
      case AppPrecioPackage.ARREGLO: return createArreglo();
      case AppPrecioPackage.LISTADO: return createListado();
      case AppPrecioPackage.TIPOS_ARREGLO_LISTADO: return createTiposArregloListado();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case AppPrecioPackage.EVENTO:
        return createEventoFromString(eDataType, initialValue);
      case AppPrecioPackage.TIPO_DATO:
        return createTipoDatoFromString(eDataType, initialValue);
      case AppPrecioPackage.COLOR:
        return createColorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case AppPrecioPackage.EVENTO:
        return convertEventoToString(eDataType, instanceValue);
      case AppPrecioPackage.TIPO_DATO:
        return convertTipoDatoToString(eDataType, instanceValue);
      case AppPrecioPackage.COLOR:
        return convertColorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AppPrecio createAppPrecio()
  {
    AppPrecioImpl appPrecio = new AppPrecioImpl();
    return appPrecio;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dominio createDominio()
  {
    DominioImpl dominio = new DominioImpl();
    return dominio;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arquitectura createArquitectura()
  {
    ArquitecturaImpl arquitectura = new ArquitecturaImpl();
    return arquitectura;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tecnologia createTecnologia()
  {
    TecnologiaImpl tecnologia = new TecnologiaImpl();
    return tecnologia;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Servicio createServicio()
  {
    ServicioImpl servicio = new ServicioImpl();
    return servicio;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetodoComponente createMetodoComponente()
  {
    MetodoComponenteImpl metodoComponente = new MetodoComponenteImpl();
    return metodoComponente;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetodoServicio createMetodoServicio()
  {
    MetodoServicioImpl metodoServicio = new MetodoServicioImpl();
    return metodoServicio;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetodoTecnologia createMetodoTecnologia()
  {
    MetodoTecnologiaImpl metodoTecnologia = new MetodoTecnologiaImpl();
    return metodoTecnologia;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entidad createEntidad()
  {
    EntidadImpl entidad = new EntidadImpl();
    return entidad;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interfaz createInterfaz()
  {
    InterfazImpl interfaz = new InterfazImpl();
    return interfaz;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Propiedad createPropiedad()
  {
    PropiedadImpl propiedad = new PropiedadImpl();
    return propiedad;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Componente createComponente()
  {
    ComponenteImpl componente = new ComponenteImpl();
    return componente;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CampoEntrada createCampoEntrada()
  {
    CampoEntradaImpl campoEntrada = new CampoEntradaImpl();
    return campoEntrada;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Boton createBoton()
  {
    BotonImpl boton = new BotonImpl();
    return boton;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BotonOpcionItem createBotonOpcionItem()
  {
    BotonOpcionItemImpl botonOpcionItem = new BotonOpcionItemImpl();
    return botonOpcionItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lista createLista()
  {
    ListaImpl lista = new ListaImpl();
    return lista;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tipos createTipos()
  {
    TiposImpl tipos = new TiposImpl();
    return tipos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LLave createLLave()
  {
    LLaveImpl lLave = new LLaveImpl();
    return lLave;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arreglo createArreglo()
  {
    ArregloImpl arreglo = new ArregloImpl();
    return arreglo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Listado createListado()
  {
    ListadoImpl listado = new ListadoImpl();
    return listado;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TiposArregloListado createTiposArregloListado()
  {
    TiposArregloListadoImpl tiposArregloListado = new TiposArregloListadoImpl();
    return tiposArregloListado;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Evento createEventoFromString(EDataType eDataType, String initialValue)
  {
    Evento result = Evento.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEventoToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TipoDato createTipoDatoFromString(EDataType eDataType, String initialValue)
  {
    TipoDato result = TipoDato.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTipoDatoToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color createColorFromString(EDataType eDataType, String initialValue)
  {
    Color result = Color.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertColorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AppPrecioPackage getAppPrecioPackage()
  {
    return (AppPrecioPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AppPrecioPackage getPackage()
  {
    return AppPrecioPackage.eINSTANCE;
  }

} //AppPrecioFactoryImpl
