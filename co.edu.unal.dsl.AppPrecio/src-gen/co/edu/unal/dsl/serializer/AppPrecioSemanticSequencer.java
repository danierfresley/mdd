/*
 * generated by Xtext 2.19.0
 */
package co.edu.unal.dsl.serializer;

import co.edu.unal.dsl.appPrecio.AppPrecio;
import co.edu.unal.dsl.appPrecio.AppPrecioPackage;
import co.edu.unal.dsl.appPrecio.Arquitectura;
import co.edu.unal.dsl.appPrecio.Arreglo;
import co.edu.unal.dsl.appPrecio.Boton;
import co.edu.unal.dsl.appPrecio.BotonOpcionItem;
import co.edu.unal.dsl.appPrecio.CampoEntrada;
import co.edu.unal.dsl.appPrecio.Componente;
import co.edu.unal.dsl.appPrecio.Dominio;
import co.edu.unal.dsl.appPrecio.Interfaz;
import co.edu.unal.dsl.appPrecio.LLave;
import co.edu.unal.dsl.appPrecio.Lista;
import co.edu.unal.dsl.appPrecio.Listado;
import co.edu.unal.dsl.appPrecio.MetodoComponente;
import co.edu.unal.dsl.appPrecio.MetodoServicio;
import co.edu.unal.dsl.appPrecio.MetodoTecnologia;
import co.edu.unal.dsl.appPrecio.Propiedad;
import co.edu.unal.dsl.appPrecio.Servicio;
import co.edu.unal.dsl.appPrecio.Tecnologia;
import co.edu.unal.dsl.appPrecio.Tipos;
import co.edu.unal.dsl.services.AppPrecioGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AppPrecioSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AppPrecioGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AppPrecioPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AppPrecioPackage.APP_PRECIO:
				sequence_AppPrecio(context, (AppPrecio) semanticObject); 
				return; 
			case AppPrecioPackage.ARQUITECTURA:
				sequence_Arquitectura(context, (Arquitectura) semanticObject); 
				return; 
			case AppPrecioPackage.ARREGLO:
				sequence_Arreglo(context, (Arreglo) semanticObject); 
				return; 
			case AppPrecioPackage.BOTON:
				sequence_Boton(context, (Boton) semanticObject); 
				return; 
			case AppPrecioPackage.BOTON_OPCION_ITEM:
				sequence_BotonOpcionItem(context, (BotonOpcionItem) semanticObject); 
				return; 
			case AppPrecioPackage.CAMPO_ENTRADA:
				sequence_CampoEntrada(context, (CampoEntrada) semanticObject); 
				return; 
			case AppPrecioPackage.COMPONENTE:
				sequence_Componente(context, (Componente) semanticObject); 
				return; 
			case AppPrecioPackage.DOMINIO:
				sequence_Dominio(context, (Dominio) semanticObject); 
				return; 
			case AppPrecioPackage.INTERFAZ:
				sequence_Interfaz(context, (Interfaz) semanticObject); 
				return; 
			case AppPrecioPackage.LLAVE:
				sequence_LLave(context, (LLave) semanticObject); 
				return; 
			case AppPrecioPackage.LISTA:
				sequence_Lista(context, (Lista) semanticObject); 
				return; 
			case AppPrecioPackage.LISTADO:
				sequence_Listado(context, (Listado) semanticObject); 
				return; 
			case AppPrecioPackage.METODO_COMPONENTE:
				sequence_MetodoComponente(context, (MetodoComponente) semanticObject); 
				return; 
			case AppPrecioPackage.METODO_SERVICIO:
				sequence_MetodoServicio(context, (MetodoServicio) semanticObject); 
				return; 
			case AppPrecioPackage.METODO_TECNOLOGIA:
				sequence_MetodoTecnologia(context, (MetodoTecnologia) semanticObject); 
				return; 
			case AppPrecioPackage.PROPIEDAD:
				sequence_Propiedad(context, (Propiedad) semanticObject); 
				return; 
			case AppPrecioPackage.SERVICIO:
				sequence_Servicio(context, (Servicio) semanticObject); 
				return; 
			case AppPrecioPackage.TECNOLOGIA:
				sequence_Tecnologia(context, (Tecnologia) semanticObject); 
				return; 
			case AppPrecioPackage.TIPOS:
				sequence_Tipos(context, (Tipos) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AppPrecio returns AppPrecio
	 *
	 * Constraint:
	 *     (dominio=Dominio arquitectura=Arquitectura tecnologia=Tecnologia)
	 */
	protected void sequence_AppPrecio(ISerializationContext context, AppPrecio semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.APP_PRECIO__DOMINIO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.APP_PRECIO__DOMINIO));
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.APP_PRECIO__ARQUITECTURA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.APP_PRECIO__ARQUITECTURA));
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.APP_PRECIO__TECNOLOGIA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.APP_PRECIO__TECNOLOGIA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAppPrecioAccess().getDominioDominioParserRuleCall_2_0(), semanticObject.getDominio());
		feeder.accept(grammarAccess.getAppPrecioAccess().getArquitecturaArquitecturaParserRuleCall_3_0(), semanticObject.getArquitectura());
		feeder.accept(grammarAccess.getAppPrecioAccess().getTecnologiaTecnologiaParserRuleCall_4_0(), semanticObject.getTecnologia());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Arquitectura returns Arquitectura
	 *
	 * Constraint:
	 *     componentes+=Componente*
	 */
	protected void sequence_Arquitectura(ISerializationContext context, Arquitectura semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Arreglo returns Arreglo
	 *     TiposArregloListado returns Arreglo
	 *
	 * Constraint:
	 *     (name=ID tipo=[Entidad|ID]?)
	 */
	protected void sequence_Arreglo(ISerializationContext context, Arreglo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BotonOpcionItem returns BotonOpcionItem
	 *
	 * Constraint:
	 *     (contenido=STRING evento=Evento color=Color? metodo=[MetodoComponente|ID]?)
	 */
	protected void sequence_BotonOpcionItem(ISerializationContext context, BotonOpcionItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boton returns Boton
	 *
	 * Constraint:
	 *     (contenido=STRING evento=Evento metodo=[MetodoComponente|ID]?)
	 */
	protected void sequence_Boton(ISerializationContext context, Boton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CampoEntrada returns CampoEntrada
	 *
	 * Constraint:
	 *     (contenido=STRING modelo=[Listado|ID] campo=[Propiedad|ID])
	 */
	protected void sequence_CampoEntrada(ISerializationContext context, CampoEntrada semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.CAMPO_ENTRADA__CONTENIDO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.CAMPO_ENTRADA__CONTENIDO));
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.CAMPO_ENTRADA__MODELO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.CAMPO_ENTRADA__MODELO));
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.CAMPO_ENTRADA__CAMPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.CAMPO_ENTRADA__CAMPO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCampoEntradaAccess().getContenidoSTRINGTerminalRuleCall_4_0(), semanticObject.getContenido());
		feeder.accept(grammarAccess.getCampoEntradaAccess().getModeloListadoIDTerminalRuleCall_7_0_1(), semanticObject.eGet(AppPrecioPackage.Literals.CAMPO_ENTRADA__MODELO, false));
		feeder.accept(grammarAccess.getCampoEntradaAccess().getCampoPropiedadIDTerminalRuleCall_10_0_1(), semanticObject.eGet(AppPrecioPackage.Literals.CAMPO_ENTRADA__CAMPO, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Componente returns Componente
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         interfaz=[Interfaz|ID] 
	 *         servicio=[Servicio|ID] 
	 *         tecnologia=[Tecnologia|ID] 
	 *         titulo=STRING 
	 *         camposEntradas+=CampoEntrada* 
	 *         botones+=Boton* 
	 *         botonesOpcionItem+=BotonOpcionItem* 
	 *         metodos+=MetodoComponente* 
	 *         arreglos+=Arreglo* 
	 *         listado+=Listado* 
	 *         lista=Lista?
	 *     )
	 */
	protected void sequence_Componente(ISerializationContext context, Componente semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dominio returns Dominio
	 *
	 * Constraint:
	 *     (servicios+=Servicio* entidades+=Entidad*)
	 */
	protected void sequence_Dominio(ISerializationContext context, Dominio semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entidad returns Interfaz
	 *     Interfaz returns Interfaz
	 *
	 * Constraint:
	 *     (name=ID propiedades+=Propiedad*)
	 */
	protected void sequence_Interfaz(ISerializationContext context, Interfaz semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LLave returns LLave
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_LLave(ISerializationContext context, LLave semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.LLAVE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.LLAVE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLLaveAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Lista returns Lista
	 *
	 * Constraint:
	 *     (name=ID contenido=STRING)
	 */
	protected void sequence_Lista(ISerializationContext context, Lista semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.LISTA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.LISTA__NAME));
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.LISTA__CONTENIDO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.LISTA__CONTENIDO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getListaAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getListaAccess().getContenidoSTRINGTerminalRuleCall_5_0(), semanticObject.getContenido());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Listado returns Listado
	 *     TiposArregloListado returns Listado
	 *
	 * Constraint:
	 *     (name=ID tipo=[Entidad|ID])
	 */
	protected void sequence_Listado(ISerializationContext context, Listado semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.TIPOS_ARREGLO_LISTADO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.TIPOS_ARREGLO_LISTADO__NAME));
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.TIPOS_ARREGLO_LISTADO__TIPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.TIPOS_ARREGLO_LISTADO__TIPO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getListadoAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getListadoAccess().getTipoEntidadIDTerminalRuleCall_3_0_1(), semanticObject.eGet(AppPrecioPackage.Literals.TIPOS_ARREGLO_LISTADO__TIPO, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MetodoComponente returns MetodoComponente
	 *
	 * Constraint:
	 *     (name=ID metodoServicio=[MetodoServicio|ID]? mensaje=STRING?)
	 */
	protected void sequence_MetodoComponente(ISerializationContext context, MetodoComponente semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetodoServicio returns MetodoServicio
	 *
	 * Constraint:
	 *     (name=ID tipoParametro=Tipos? tipoRetorno=Tipos)
	 */
	protected void sequence_MetodoServicio(ISerializationContext context, MetodoServicio semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetodoTecnologia returns MetodoTecnologia
	 *
	 * Constraint:
	 *     (name=ID llave=[LLave|ID]? valor=[TiposArregloListado|ID]?)
	 */
	protected void sequence_MetodoTecnologia(ISerializationContext context, MetodoTecnologia semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Propiedad returns Propiedad
	 *
	 * Constraint:
	 *     (name=ID tipoDato=TipoDato)
	 */
	protected void sequence_Propiedad(ISerializationContext context, Propiedad semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.PROPIEDAD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.PROPIEDAD__NAME));
			if (transientValues.isValueTransient(semanticObject, AppPrecioPackage.Literals.PROPIEDAD__TIPO_DATO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AppPrecioPackage.Literals.PROPIEDAD__TIPO_DATO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropiedadAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropiedadAccess().getTipoDatoTipoDatoEnumRuleCall_2_0(), semanticObject.getTipoDato());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Servicio returns Servicio
	 *
	 * Constraint:
	 *     (name=ID metodos+=MetodoServicio*)
	 */
	protected void sequence_Servicio(ISerializationContext context, Servicio semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tecnologia returns Tecnologia
	 *
	 * Constraint:
	 *     (name=ID llave=LLave metodos+=MetodoTecnologia*)
	 */
	protected void sequence_Tecnologia(ISerializationContext context, Tecnologia semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tipos returns Tipos
	 *
	 * Constraint:
	 *     (tipoPrimitivo=TipoDato | tipoEstructurado=[Entidad|ID])
	 */
	protected void sequence_Tipos(ISerializationContext context, Tipos semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
